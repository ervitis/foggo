package writer

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestInitializeWriter(t *testing.T) {
	logger := &log.Logger{}

	type args struct {
		logger *log.Logger
	}
	tests := []struct {
		name    string
		args    args
		want    *Writer
		wantErr assert.ErrorAssertionFunc
	}{
		{"nominal", args{logger: logger}, &Writer{logger: logger}, assert.NoError},
		{"non_nominal: logger is nil", args{logger: nil}, nil, assert.Error},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := InitializeWriter(tt.args.logger)
			if !tt.wantErr(t, err, fmt.Sprintf("InitializeWriter(%v)", tt.args.logger)) {
				return
			}
			assert.Equalf(t, tt.want, got, "InitializeWriter(%v)", tt.args.logger)
		})
	}
}

func TestWriter_Write(t *testing.T) {
	baseDir := "../../testdata/"
	type args struct {
		code         string
		baseFileName string
	}
	tests := []struct {
		name    string
		args    args
		wantLog string
		wantErr assert.ErrorAssertionFunc
	}{
		{"nominal", args{"// Code generated by foggo; DO NOT EDIT.", baseDir + "testdata3.go"}, "success to write functional option pattern code to", assert.NoError},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			b := &bytes.Buffer{}
			writer := Writer{logger: log.New(b, "", 0)}

			expectGeneratedFile := writer.createFileName(tt.args.baseFileName)
			tt.wantErr(t, writer.Write(tt.args.code, tt.args.baseFileName), fmt.Sprintf("Write(%v, %v)", tt.args.code, tt.args.baseFileName))
			assert.Containsf(t, b.String(), tt.wantLog, fmt.Sprintf("Write(%v, %v)", tt.args.code, tt.args.baseFileName))

			files, err := filepath.Glob(baseDir + "*_gen.go")
			assert.NoError(t, err)
			for _, f := range files {
				if f == expectGeneratedFile {
					err = os.Remove(f)
					assert.NoError(t, err)
					return
				}
			}
			assert.FailNow(t, fmt.Sprintf("not found expect generated file: %s", expectGeneratedFile))
		})
	}
}

func TestWriter_createFileName(t *testing.T) {
	writer := Writer{logger: &log.Logger{}}

	type args struct {
		baseFileName string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{"nominal: for golang file", args{"test1.go"}, "test1_gen.go"},
		{"nominal: for golang file in the package", args{"../package/test1.go"}, "../package/test1_gen.go"},
		{"nominal: for not golang file", args{"test1.py"}, "test1.py"},
		{"semi_nominal: have two '.go' suffix", args{"test1.go.go"}, "test1_gen.go.go"},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			assert.Equalf(t, tt.want, writer.createFileName(tt.args.baseFileName), "createFileName(%v)", tt.args.baseFileName)
		})
	}
}
